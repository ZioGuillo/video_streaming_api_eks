name: Push Docker Image w Tag

on:
  push:
    branches: [ master ]
    paths:
      - 'app_api_streaming/app/**'
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  CONTAINER_NAME: streaming_api_flask
  IMAGE_TAG: latest

jobs:
  push:
    runs-on: ubuntu-latest
    env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - id: release
        uses: rymndhng/release-on-push-action@master
        with:
          bump_version_scheme: minor
          tag_prefix: ""

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Build and push Docker image with release tag
        run: |
          docker build -t $DOCKER_USERNAME/$CONTAINER_NAME:${{ steps.release.outputs.tag_name }} .
          docker push $DOCKER_USERNAME/$CONTAINER_NAME:${{ steps.release.outputs.tag_name }}
        working-directory: app_api_streaming

      - name: Run Trivy vulnerability scanner on release tag
        run: trivy image --format table --exit-code 1 --ignore-unfixed --vuln-type os,library --severity CRITICAL,HIGH ${{ env.DOCKER_USERNAME }}/${{ env.CONTAINER_NAME }}:${{ steps.release.outputs.tag_name }}

      - name: Build and push Docker image with 'latest' tag
        run: |
          docker build -t $DOCKER_USERNAME/$CONTAINER_NAME:$IMAGE_TAG -f Dockerfile .
          docker push $DOCKER_USERNAME/$CONTAINER_NAME:$IMAGE_TAG
        working-directory: app_api_streaming

      - name: Run Trivy vulnerability scanner on latest tag
        run: trivy image --format table --exit-code 1 --ignore-unfixed --vuln-type os,library --severity CRITICAL,HIGH ${{ env.DOCKER_USERNAME }}/${{ env.CONTAINER_NAME }}:${{ env.IMAGE_TAG }}

      - name: Log out of Docker Hub
        if: always()
        run: docker logout

      - name: Check Output Parameters
        run: |
          echo "Got tag name ${{ steps.release.outputs.tag_name }}"
          echo "Got release version ${{ steps.release.outputs.version }}"
          echo "Upload release artifacts to ${{ steps.release.outputs.upload_url }}"
